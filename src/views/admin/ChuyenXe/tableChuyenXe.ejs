<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quản Lý Tuyến Xe</title>
  <!-- Link Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js"></script>
  <!-- <link rel="stylesheet" href="../../style/menu.css"> -->
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f6f9;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 1000px;
      margin: 20px auto;
      padding: 20px;
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h1 {
      text-align: center;
      color: #333;
      font-weight: 300;
    }

    .table-responsive {
      margin-top: 20px;
    }

    .notification {
      display: none;
      padding: 15px;
      margin: 20px 0;
      border-radius: 5px;
      text-align: center;
      font-weight: bold;
    }

    .notification.success {
      background-color: #28a745;
      color: #ffffff;
    }

    .notification.error {
      background-color: #dc3545;
      color: #ffffff;
    }
  </style>

</head>

<body>
  <div class="sidebar" id="sidebar">
    <div class="sidebar-header">
      <h2>TRANG QUẢN TRỊ</h2>
    </div>
    <div class="sidebar-menu">
      <a href="/admin/dashboard" class="menu-item active">
        <i class="fas fa-home"></i>
        <span>Trang Chủ</span>
      </a>
      <a href="/admin/tuyen-xe" class="menu-item">
        <i class="fas fa-route"></i>
        <span>Quản Lý Tuyến Xe</span>
      </a>
      <a href="/admin/chuyen-xe" class="menu-item">
        <i class="fas fa-bus"></i>
        <span>Quản Lý Chuyến Xe</span>
      </a>
      <a href="/admin/xe" class="menu-item">
        <i class="fas fa-ticket-alt"></i>
        <span>Quản Lý Vé</span>
      </a>
    </div>
    <button class="logout-button" onclick="handleLogout()">
      <i class="fas fa-sign-out-alt"></i>
      <span>Đăng Xuất</span>
    </button>
  </div>
  <div class="container">
    <h1>Quản Lý Chuyến Xe</h1>

    <button class="btn btn-success mb-3" onclick="showAddModal()">Thêm Chuyến Xe Mới</button>
    <div class="table-responsive">
      <table class="table table-bordered table-hover">
        <thead class="table-primary">
          <tr>
            <th>ID</th>
            <th>Ngày Đi</th>
            <th>Ngày Đến</th>
            <th>Giá</th>
            <th>Số Chổ Trống</th>
            <th>Tuyến</th>
            <th>Xe</th>
            <th>Thao Tác</th>
          </tr>
        </thead>
        <tbody id="routeTableBody">
          <!-- Dữ liệu tuyến xe sẽ được chèn vào đây -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal Form -->
  <div id="routeModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 id="modalTitle" class="modal-title">Thêm Chuyến Xe</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="routeForm" onsubmit="handleSubmit(event)">
            <input type="hidden" id="routeId">
            <div class="mb-3">
              <label for="ngayDi" class="form-label">Ngày Đi</label>
              <input type="datetime-local" id="ngayDi" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="ngayDen" class="form-label">Ngày Đến</label>
              <input type="datetime-local" id="ngayDen" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="giaChuyenXe" class="form-label">Giá</label>
              <input type="number" id="giaChuyenXe" class="form-control" required>
            </div>
            <div class="mb-3">
              <label for="soChoTrong" class="form-label">Số Chổ Trống
                <input type="number" id="soChoTrong" class="form-control" readonly required>
            </div>
            <div class="mb-3">
              <label for="tuyenXe" class="form-label">Tuyến Xe</label>
              <select id="tuyenXe" class="form-control" required>
                <option value="">Chọn Tuyến Xe</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="xe" class="form-label">Xe</label>
              <select id="xe" class="form-control" required>
                <option value="">Chọn Xe</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary w-100">Lưu</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Notification Messages -->
  <div id="notification" class="notification"></div>

  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    const API_URL = 'http://localhost:3000/api/chuyen-xe';
    const tuyenXeURL = 'http://localhost:3000/api/tuyen-xe';
    const xeURL = 'http://localhost:3000/api/xe';
    const chonXe = document.getElementById('xe');
    const choTrong = document.getElementById('soChoTrong');
    const ngayDiInput = document.getElementById('ngayDi');
    const ngayDenInput = document.getElementById('ngayDen');
    const axiosInstance = axios.create({ baseURL: API_URL, headers: { 'Content-Type': 'application/json' } });
    axiosInstance.interceptors.request.use((config) => {
      const token = localStorage.getItem('accessToken');
      if (token) config.headers['Authorization'] = `Bearer ${token}`;
      return config;
    },
      (error) => Promise.reject(error)
    );
    let routes = [];
    let tuyenXeList = [];
    let xeList = [];
    async function loadTuyenXe() {
      try {

        const response = await axios.get(tuyenXeURL, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
          }
        });
        if (response.status == 200) {
          tuyenXeList = response.data.result;
          const tuyenXeSelect = document.getElementById('tuyenXe');
          console.log('tuyenXeList', tuyenXeList);

          tuyenXeList.forEach((tx) => {
            const option = document.createElement('option');
            option.value = tx._id;
            option.text = tx.tenTuyenXe;
            tuyenXeSelect.appendChild(option.cloneNode(true));
          });
        } else {
          showNotification('Không thể tải danh sách Tuyến Xe', true);
        }
      } catch (error) {
        console.error('Lỗi khi tải Tuyến Xe:', error);
        showNotification('Có lỗi xảy ra khi tải Tuyến Xe', error);
      }
    }

    async function loadXe() {

      try {
        const response = await axios.get(xeURL, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
          }
        });
        console.log('response', response);
        if (response.status == 200) {
          xeList = response.data.data;
          const xeSelect = document.getElementById('xe');
          //console.log('xeList', response.data.data);

          xeList.forEach((xe) => {
            const option = document.createElement('option');
            option.value = xe._id;
            option.text = xe.tenXe;
            option.setAttribute('data-soChoTrong', xe.sucChua);
            xeSelect.appendChild(option.cloneNode(true));
          });
        } else {
          showNotification('Không thể tải danh sách Xe', true);
        }
      } catch (error) {
        console.error('Lỗi khi tải Xe:', error);
        showNotification('Có lỗi xảy ra khi tải Xe', error);
      }
    }
    chonXe.addEventListener('change', (event) => {
      const selectedXe = chonXe.options[chonXe.selectedIndex];
      const soChoTrong = selectedXe.getAttribute('data-soChoTrong');
      choTrong.value = soChoTrong;
    });
    //Check ngày di và ngày đến
    function validateDates() {
      const ngayDi = new Date(ngayDiInput.value);
      const ngayDen = new Date(ngayDenInput.value);
      const now = new Date();
      if (ngayDi >= ngayDen) {
        alert('Ngày đi và giờ đi phải nhỏ hơn ngày đến và giờ đến');
        ngayDenInput.value = ''; // Xóa giá trị của ngayDen để người dùng chọn lại
      }
      else if (ngayDen <= ngayDi) {
        alert('Ngày đến và giờ đến phải lớn hơn ngày đi và giờ đi');
        ngayDiInput.value = ''; // Xóa giá trị của ngayDi để người dùng chọn lại
      }
      else if (ngayDi < now) {
        alert('Ngày đi và giờ đi không được nhỏ hơn thời gian hiện tại.');
        ngayDiInput.value = ''; // Xóa giá trị của ngayDi để người dùng chọn lại
      } else if (ngayDen < now) {
        alert('Ngày đến và giờ đến không được nhỏ hơn thời gian hiện tại.');
        ngayDenInput.value = '';
      }
    }
    ngayDiInput.addEventListener('change', validateDates);
    ngayDenInput.addEventListener('change', validateDates);

    function showAddModal() {
      document.getElementById('modalTitle').innerText = 'Thêm Chuyến Xe';
      document.getElementById('routeForm').reset();
      document.getElementById('routeId').value = '';
      const modal = new bootstrap.Modal(document.getElementById('routeModal'));
      modal.show();
    }

    function showEditModal(id) {
      const route = routes.find(route => route.id === id);

      if (route) {
        console.log('route: ', route);
        document.getElementById('modalTitle').innerText = 'Chỉnh Sửa Chuyến Xe';
        document.getElementById('routeId').value = route.id;
        const ngayDi = new Date(route.ngayDi).toISOString().slice(0, 16);
        const ngayDen = new Date(route.ngayDen).toISOString().slice(0, 16);
        document.getElementById('ngayDi').value = ngayDi;
        document.getElementById('ngayDen').value = ngayDen;
        document.getElementById('giaChuyenXe').value = route.giaChuyenXe;
        document.getElementById('soChoTrong').value = route.soChoTrong;
        // Tìm kiếm ID của tuyến xe và xe dựa trên tên của chúng
        const tuyenXe = tuyenXeList.find(tx => tx.tenTuyenXe === route.tuyenXe);
        const xe = xeList.find(x => x.tenXe === route.xe);

        if (tuyenXe) {
          document.getElementById('tuyenXe').value = tuyenXe._id;
        }
        if (xe) {
          document.getElementById('xe').value = xe._id;
        }

        const modal = new bootstrap.Modal(document.getElementById('routeModal'));
        modal.show();
      }
    }

    function showNotification(message, isError = false) {
      const notification = document.getElementById('notification');
      notification.innerText = message;
      notification.className = `notification ${isError ? 'alert alert-danger' : 'alert alert-success'} text-center`;
      notification.style.display = 'block';
      setTimeout(() => {
        notification.style.display = 'none';
      }, 3000);
    }

    async function fetchRoutes() {
      try {
        const response = await axiosInstance.get('');
        if (response.status == 200) {
          console.log('response.data.result: ', response.data.data);
          routes = response.data.data.map(route => ({
            id: route._id,
            ngayDi: route.ngayDi,
            ngayDen: route.ngayDen,
            giaChuyenXe: route.giaChuyenXe,
            soChoTrong: route.soChoTrong,
            tuyenXe: route.tuyenXe.tenTuyenXe,
            xe: route.xe.tenXe,
            status: route.__v === 0 ? 'active' : 'inactive'
          }));
          renderTable(routes);
        } else {
          showNotification('Không thể tải danh sách Chuyến Xe', true);
        }
      } catch (error) {
        console.error(error);
        showNotification('Có lỗi xảy ra khi tải dữ liệu', true);
      }
    }

    function renderTable(routes) {
      const tbody = document.getElementById('routeTableBody');
      tbody.innerHTML = '';
      routes.forEach(route => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
    <td>${route.id}</td>
    <td>${route.ngayDi}</td>
    <td>${route.ngayDen}</td>
    <td>${route.giaChuyenXe}</td>
    <td>${route.soChoTrong}</td >
    <td>${route.tuyenXe}</td>
    <td>${route.xe}</td>
    <td>
      <button class="btn btn-sm btn-primary edit-btn" onclick="showEditModal('${route.id}')">Sửa</button>
      <button class="btn btn-sm btn-danger delete-btn" onclick="deleteRoute('${route.id}')">Xóa</button>
    </td>
        `;
        tbody.appendChild(tr);
      });
    }

    document.addEventListener('DOMContentLoaded', () => {

      if (!localStorage.getItem('accessToken')) window.location.href = '/admin/login';
      fetchRoutes();
      loadXe();
      loadTuyenXe();
    });

    async function handleSubmit(event) {
      event.preventDefault(); // Ngăn chặn hành động submit mặc định cảu form

      const routeId = document.getElementById('routeId').value;
      const ngayDi = document.getElementById('ngayDi').value;
      const ngayDen = document.getElementById('ngayDen').value;
      const giaChuyenXe = document.getElementById('giaChuyenXe').value;
      const soChoTrong = document.getElementById('soChoTrong').value;
      const tuyenXe = document.getElementById('tuyenXe').value;
      console.log('tuyenXe: ', tuyenXe);
      const xe = document.getElementById('xe').value;

      const routeData = {
        ngayDi,
        ngayDen,
        giaChuyenXe,
        tuyenXe,
        soChoTrong,
        xe
      };

      try {
        let response;
        console.log('routeData: ', routeData);
        if (routeId) {
          // Nếu có routeId, tức là đang chỉnh sửa tuyến xe
          response = await axiosInstance.put(`/${routeId}`, routeData);
          console.log('Đã vaafo hàm chỉnh sửa với routeID: ', routeId);
        } else {
          // Nếu không có routeId, tức là thêm tuyến xe mới
          response = await axiosInstance.post('/create', routeData);
        }
        console.log('response: ', response);
        console.log('response.data: ', response.data);
        console.log('response.data.status: ', response.data.status);
        if (response.status == 200) {
          showNotification(routeId ? 'Chỉnh sửa thành công' : 'Thêm Chuyến xe mới thành công');
          fetchRoutes(); // Tải lại danh sách tuyến xe
          const modal = bootstrap.Modal.getInstance(document.getElementById('routeModal'));
          modal.hide(); // Đóng modal sau khi lưu thành công
        } else {
          showNotification('Không thể lưu dữ liệu, vui lòng thử lại', true);
        }
      } catch (error) {
        console.error('Lỗi khi lưu dữ liệu:', error);
        showNotification('Có lỗi xảy ra khi lưu dữ liệu', true);
      }
    }

    async function deleteRoute(routeId) {
      const confirmDelete = confirm("Bạn có chắc chắn muốn xóa tuyến xe này không?");

      if (!confirmDelete) return; // Nếu người dùng chọn 'Cancel', dừng chức năng xóa

      try {
        const response = await axiosInstance.delete(`/${routeId}`);
        if (response.status = 200) {
          showNotification('Xóa Chuyến xe thành công');
          fetchRoutes(); // Tải lại danh sách tuyến xe sau khi xóa thành công
        } else {
          showNotification('Không thể xóa Chuyến xe, vui lòng thử lại', true);
        }
      } catch (error) {
        console.error('Lỗi khi xóa tuyến xe:', error);
        showNotification('Có lỗi xảy ra khi xóa Chuyến xe', true);
      }
    }
  </script>

</body>

</html>